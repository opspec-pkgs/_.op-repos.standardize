name: standardize-repo
inputs:
  authorEmail:
    string:
      constraints: { minLength: 1 }
      description: email address to associate commits with
  authorName:
    string:
      constraints: { minLength: 1 }
      description: name to associate commits with
  githubUsername:
    string:
      constraints: { minLength: 1 }
      description: github email address to authenticate with
  githubAccessToken:
    string:
      constraints: { minLength: 1 }
      description: github access token to authenticate with; see https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
      isSecret: true
  repoName:
    string:
      constraints: { minLength: 1 }
      description: name of repo
  cache:
    dir:
      default: $(../)
run:
  serial:
    - op:
        ref: github.com/opspec-pkgs/git.repo.clone-https#1.0.0
        inputs:
          username: $(githubUsername)
          password: $(githubAccessToken)
          url: https://github.com/opspec-pkgs/$(repoName).git
        outputs:
          repo:
    - container:
        image:
          ref: alpine
        cmd:
          - sh
          - -ce
          - |
            echo $(repoName)
            cp -TR /repo /src/$(repoName)
        dirs:
          /src: $(cache)
          /repo: $(repo)
    - if:
        - exists: $(cache/$(repoName)/op.yml)
      name: apply updates to $(repoName)
      serial:
      - op:
          ref: github.com/opspec-pkgs/_.op.bootstrap#4.0.1
          inputs:
            srcDir: $(cache/$(repoName))
      - op:
          ref: github.com/opspec-pkgs/github.repo.branch.protection.set#1.0.0
          inputs:
            accessToken: $(githubAccessToken)
            ownerName: opspec-pkgs
            repoName:
            branchName: main
      - op:
          ref: github.com/opspec-pkgs/git.repo.stage-changes#1.1.0
          inputs:
            pathSpec: .
            repo: $(cache/$(repoName))
          outputs:
            repo: $(cache/$(repoName))
      - container:
          image:
            ref: alpine/git
          cmd:
            - sh
            - -ce
            - |
              if [[ -n "\$(git status --porcelain)" ]]; then
                echo -n true > /isModified
              else
                echo -n false > /isModified
              fi
          dirs:
            /repo: $(cache/$(repoName))
          files:
            /isModified: $(isModified)
          workDir: /repo
      - name: push changes to $(repoName)
        if:
          - eq: [true, $(isModified)]
        serial:
        - op:
            ref: github.com/opspec-pkgs/git.repo.commit-changes#1.1.1
            inputs:
              authorEmail:
              authorName:
              message: chore) Re-run bootstrap
              dotGitDir: $(cache/$(repoName)/.git)
        - op:
            ref: github.com/opspec-pkgs/git.repo.push-https#1.1.0
            inputs:
                srcRepo: $(cache/$(repoName))
                username: $(githubUsername)
                password: $(githubAccessToken)